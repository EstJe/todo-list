version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} --version | grep -q 7.3.0" ]
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 30s

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Waiting for Kafka to be fully ready...';
      cub kafka-ready -b ${KAFKA_HOST}:${KAFKA_PORT} 1 60;
      echo 'Creating topic...';
      kafka-topics --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} --create --if-not-exists --topic ${KAFKA_TOPIC} --partitions ${KAFKA_PARTITIONS} --replication-factor 1;
      echo 'Topic created successfully';
      sleep 5;
      "
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_HOST}:${KAFKA_PORT}

  app:
    build:
      context: ../  
      dockerfile: deployments/docker/grpc-server/Dockerfile
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${TODOAPP_GRPC_PORT}:${TODOAPP_GRPC_PORT}"

  proxy:
    build:
      context: ../
      dockerfile: deployments/docker/http-gateway/Dockerfile
    env_file: .env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "${PROXY_HTTP_PORT}:${PROXY_HTTP_PORT}"

  audit:
    build:
      context: ../
      dockerfile: deployments/docker/audit/Dockerfile
    env_file: .env
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090" # Статичен, используется в config файлах мониторинга
    volumes:
      - ../deployments/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - app

  loki:
    image: grafana/loki:latest
    ports:
      - "${LOKI_PORT}:3100"  # Статичен, используется в config файлах мониторинга
    volumes:
      - ../deployments/monitoring/loki/config.yaml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    ports:
      - "${PROMTAIL_PORT}:9080"
    volumes:
      - ../deployments/monitoring/promtail/config.yaml:/etc/promtail/config.yml
      - ../var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    depends_on:
      - app
      - loki

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:3000" # Статичен, используется в config файлах мониторинга
    volumes:
      - ../deployments/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../deployments/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - loki

volumes:
  postgres_data:
  redis_data: